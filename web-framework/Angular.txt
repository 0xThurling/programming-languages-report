deliver subtract cagey soft pie alive follow fly innocent dolls
This post was mass deleted and anonymized withRedact
I used to work full time with Angular and still use it for freelancing which is really easy start doing stuff in unknown projects since everything is opinionated and usually everyone follows a similar structure.
My full time job is using React and even though I don't hate it, you never know where something is, it really depends on the dev that made it and whatever they thought it was the best idea.
So in conclusion, I like Angular because it is opinionated and easier to maintain (in my experience)
React is a cluster fuck.
I mean, pretty much. React is the Kim Kardashian of web technologies in my opinion. It's famous because it's famous. It's the first thing people tend to pick up when they're learning and then people develop this tribal affinity for it because they know it and it's familiar.
Angular is a framework. A framework is a prestructured layout for accomplishing something.
React is, in my opinion,not a framework. It's a loosely federated set of libraries based on a core dependency-injection and templating engine.
People who complain about Angular being too opinionated or too heavy duty are complaining about frameworks, not Angular. And there's nothing wrong with not needing a framework - not every application warrants it and if you're a single developer or a small team, the benefits of Angular's standardization and structure aren't really all that evident.
If, however, you are a larger team working on a big project or many big projects, Angular is a godsend. You can walk into an Angular project and get the lay of the land almost instantly. Logic is separated from the templates and styling. Each component has its own .ts, .css, and html file. This, I would argue, is an objectively superior organizational model for code.
Components are broken into modules and organized hierarchically alongside their attendant services. The CLI tool helps to create class skeletons that enforce consistency. There is no debate about which state management or routing library solution to use. And importantly, there is no possibility that the solution you choose will get abandoned by the developers and require you to rip it out in favor of something else.
Everything Angular is tested and designed to work with everything else. If you've ever worked on a medium to large team, you know how time consuming it can be to update libraries. The Angular team publishes guidance on each update and the CLI takes care of most things automatically.
And lets not forget about the built-in, first class nature of RxJs and Typescript. I think many, when they say they don't like Angular, are really saying they had difficulty understanding the reactive programming paradigm. And it's not just React people who have trouble. I've been in threads in this sub where there was an alarming number of people saying they don't use RxJs, or use it only when they have to. Not using reactive, event-driven code in an Angular app is like trying to fit a square peg into a round hole.
That's not to say React doesn't have a time and place too though. It's a shame that people are organized into one camp or another, because they're not mutually exclusive. It's not an either/or proposition. Choose the library or framework that fits the bill.
Tons of documentation.
Enormous user community.
It's highly opinionated, which, of course, has it's own inherent drawbacks, but for large scale enterprise solutions, even if you disagree with how something has to be done, everyone on the team has to live in that same opinionated world, so everyone is on the same page, and helps prevent a wild west style of coding where each developer is doing their own thing. I'd rather everyone be consistent on things of that nature. Kind of like tabs versus spaces... Sure, I have my preference, but the most important part is if the team as a whole agrees to do it one consistent way, it's just better. A person's singular opinion doesn't matter in a team environment.
We don't have to think a lot of what kind of libraries to use, what kind of design pattern to adopt, using service pattern for state management suffice in many cases, and easy to maintain as due to its opinionated nature caused all angular apps to be similar, thus any angular devs can grasp what is going on, where to look for what, without taking too much time reviewing the codebase.
Angular just allows you to get shit done. In a professional workspace, this is obviously ideal.
The built in Http Client is way better than any 3rd party library I've used in React. 2 way data binding is a Godsend. Form state and validation is 1,000x easier and less error prone. File organization is so much cleaner. Errors in dev mode are more helpful than react errors (especially in v15). You really don't ever need to install any additional libraries if you don't want to
It's mostly calm, looks like Java ðŸ˜… I mean, I don't have to relearn something new every 2 months and I can be productive. Every time I have to work with react they changed how things are done. Classes then functions, redux everywhere then setstate, etc. And I have to spend a lot of time selecting the best library for anything, as nothing is included.
Separation of concerns. I did a few tutorials in react, when I read the code it just looks messy as hell. When I read an angular project I know data will be in the ts file and it needs to be binded to the HTML, if I need to add styling to a particular part there's a scss file where I can apply it and if I want to add unit test to a component I can go to the appropriate file in that component.
