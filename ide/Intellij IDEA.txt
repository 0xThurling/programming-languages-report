> - Rounding of corners. Religion at this point> - Homogenization. JetBrains wants to be like VSCode> - Animations. Haven't seen them but it will be filledSeriously, HN? This is the quality that you reward with hundreds of points? Unlike the author, I happen to have used this UI for the past five months and it solves many of my longstanding gripes with IntelliJ:- Gutters are now much better at highlighting local changes, while also being less visually obtrusive.- The shaded tool window background nicely separates them from the editor- Showing the git branch next to the title makes it so much easier to understand where I am, when I work with multiple projects and branches.- Breadcrumbs in the Statusbar save some space and look much cleaner---Also, many of the complaints that I've seen in this thread are either wrong or exaggerated:- "Monochrome icons" - Only the toolbar icons are monochrome, everything else still uses coloured icons.- "The toolbar has less icons now" - It's customisable, you can put whatever you want in there. Yes, with colourful icons.- "More Whitespace" - The vertical space from the top of the screen to the editor is the exact same. The Project view actually looses some vertical space, but only because the font size is bigger (Which you can change obviously). The spacing between the list items is the same according to a designer on Slack.- "This is just some incompetent designer pushing their agenda on us, breaking my workflow because something something trends" - go touch grass.And finally, just to be clear: no, there are no animations - everything is instant.
>This is the quality that you reward with hundreds of points?Many read HN just for the comments, so will upvote a low-quality article with a discussion-driving headline (often without reading the article), purely to generate discussion on a topic they're interested in.It's something of a pity as articles like this with absolute garbage takes do a disservice to those users who share the sentiment forvalidreasons. But at least we get to read some of those more well-reasoned arguments in the comments here.
I know it’s just 1 user, but I’d like to validate your hypothesis… I did exactly that with this article, even after reading it.
Personally I'm not "rewarding the post with hundred of points", but I've upvoted because I share the sentiment and want JetBrains to really consider each change they make: Is it for change's sake, or because it's actuallybetter?
What makes you think that they haven't already considered it? It's rather offensive to assume that a group of UX professionals decided to take on a massive overhaul just for fun. Given UX has never been a major priority at JetBrains, it implies that they decided it was valuable enough to spend the time and money on this. I just can't imagine this was done on a whim
I think you would be shocked at how often UX designers get greenlit to make a refresh based on vague things like the current code base being hard to use or keeping up with the Joneses of other products or just to have new marketing pictures that look "modern". The default assumption that this effort was made without proper consideration is right more often than its wrong.Maligning the devs? Not so much. Wanting them to show their work and explain why they think looking more like VSCode is a good idea? Very much so.
> I think you would be shocked at how often UX designers get greenlit to make a refresh based on vague things like the current code base being hard to use or keeping up with the Joneses of other products or just to have new marketing pictures that look "modern".Not JetBrains, but I worked at a small app company that embarked on multiple UX re-dos for the vaguest of reasons. If your company has a charismatic VP of Design who has the CEO's ear, you're going to be spending your time on UX rewrites yearly. "It's notmodernorsleek! It doesn'tpopenough! We need to change our branding so it'sfresher! Or, Users are confused with our current design! (without qualitative or quantitative user studies that show this)" It's never a measured attribute that they want to change. If you were a digital artist or interaction designer, you would have been able to build a great portfolio there in a matter of a few years.
Even with UX studies, it's very easy for people to get the answer they want or draw the conclusion they want to.Worked for a company that went full circle multiple times on its UI for what was ultimately a very large form between a single page with collapsible modules and tabbed UI layouts as the UX feedback oscillated between "Users don't know all these options are there and we want them to discover them because they keep asking us to implement features we already have" and "Users are overwhelmed by the number of options on screen"
Bless their hearts, UI Designers. Just remodeled my kitchen and had to actively dodge my designers' and showrooms' recommendations of a "modern" look which is basically all white or make it look like a friggin office morgue. It's not flashy but it is very utility-first and is beautiful.I aimed for something that _wouldn't_ need to change visually with the times. UI Design is often the exact opposite: showcase that your property is on the bleeding edge of design.I wonder what they'll do once they realize you can only round a corner so much.
It might not be fair to group the UX designers of Jetbrains with every other UX designer.But it is a giant problem that the industry has been "simplifying" everything so mindlessly for so many years that today my iOS device gave me a legitimate prompt that just didn't contain enough information to decide aboutat all.Something along the lines of "Change in app administration [...] will you allow [...] to administer Gmail [...] Your data will be administered."Now tell me: is this thing going to administer my private mails? 2 factor verification? (Yes, Google often use their mail app for that.) etc etc.At this point it is utterly meaningless: the only correct thing to do with such a vague prompt is to say no until an explanation has been given.But I can surely imagine UX developers patting themselves and each others on the back for such a brilliant simple design.To be fair, good UX designers exist, but everytime I hear about ux-designers near any of my products I get a little scared :-)
> It's rather offensive to assume that a group of UX professionals decided to take on a massive overhaul just for fun.Why does this surprise you when it happens all of the time? As a UX professional myself this is one of the banes of my existence.Consider it's less often a "team of UX professionals" who make these decisions, and more often the manager of the month passing out a resume item.
You say that but I try not to update my iphone as long as possible because I got tired of them deciding the random button on the music player needed to be hidden behind some menu somewhere.  The best part is that it was checked on when the update happened and I had no way to turn it off.So yeah, fuck giving them the benefit of the doubt.  Been there, done that, have the t-shirt.If it turns out not to be 90% gratuitous changes it will be the anomaly, not the rule.  They don't deserve that benefit of the doubt at this point.
> It's rather offensive to assume that a group of UX professionals decided to take on a massive overhaul just for fun.Not fun, but giving themselves work.Unfortunately, no UI team ever got rewarded for leaving a good product alone. They're hired to work, so they work.Anyone old enough has seen the quality of certain products peak and then decline, after the company just couldn't leave well enough alone, and ruined excellence with needless tampering. I've hung on to various applications long after their EOL because the new versions were really worse. History is replete with great websites absolutely ruined by redesigns.This field needs more of an old traditional craftsman appreciation for excellence.
I used Office 2003 until I was forced to use Windows 10 for work at which point, despite my best efforts, was sufficiently incompatible, that I "upgraded" to Office 2010 which seems, I suppose, the least bad "modern" office version...I still miss Office 2003, it was so much better than new versions
LibreOffice has the "old" UI which I find way easier to navigate.  I'll use that until I can't on any given document.  Has saved me lots of time.
How do you explain the current UI shit hole that we live in these days then?  It surely wasn't to increase productivity or user experience.  UIs in the 90's were more functionalandflexible than the UIs of today.
> It's rather offensive to assume that a group of UX professionals decided to take on a massive overhaul just for fun.It's not "just for fun". If the UX doesn't get updated, then they are out of a job.
It didn't have to be UX team. It could have been some marketing genius that came to UX team and told them that his nephew is using new funky, black background IDE called VS Code, which is all the hottest nowadays, so IntelliJ HAS TO catch up, should become modern, trendy and fun again, so it will bring more sales.I only hope nephew didn't mention Electron backend.
You joke about Electron but IntelliJ's Swing based UI doesn't feel more responsive and if they'd change it to cache or make async whatever it's spending a minute doing on startup then I could actually consider using it for more than just Java
Because the new UX feels more geared towards looking like VSCode, than actually improving things.
>  It's rather offensive to assume that a group of UX professionals decided to take on a massive overhaul just for fun.I suppose it is human nature to randomly change things (see the other submission about gardening (continuous small changes are different from big changes time to time, still equally annoying)), also a result of the free market, there are too many UX people for coming up new products and make them final.I bet if architects could change the buildings in minutes and for free, now we all lived in constantly changing (but obviously not improving) buildings.
> UX professionals decided to take on a massive overhaul just for fun.I’d say they were doing it because they were getting paid for doing it. But that doesn’t mean it actually needed doing. What I have found in tech especially is that a product may get to a point where it’s meeting all its functional goals and really only needs small tweaks and fixes. But this is at odds with company growth. I’m not saying this is the case here but it’s prevalent in this industry.
This isn't really JetBrains fault, but the track record of products making full redesigns is bad enough that we do tend to assume that the priorities, values, and considerations of UX professionals run contrary to developers/users priorities, to the point where the result is often less useful/ergonomic than what it replaced.To be fair, this tendency to prioritize your own values above those of your users is not unique to designers. For example, Linus' insistence that kernel developers "don't break userspace."
> For example, Linus' insistence that kernel developers "don't break userspace."Wait, what? Is that meant as a counterexample?
He wouldn’t say it so often if developersdidn’tbreak userspace.
Gotcha.
Because many of UI redesigns I have witnessed with tools and sites I spend a lot of time on were for the worse. Somehow it being done by UX professionals is not a guarantee that I, as a user, would benefit from it. I can't begin to guess what the motivations were, I just know the results.
> It's rather offensive to assume that a group of UX professionals decided to take on a massive overhaul just for fun.And it's experience that says that they do.  Maybe not for fun, but for another 3, 6, 9 mos of pay.
I’ve got about 3 invitations from JetBrains‘ UX team just this year, about discussing UI in their products. Never took part in any, because I lack the time and motivation, however, they do seem to make the effort to get developer feedback, before making grand changes.
I’m glad someone else called this out.“I imagine it’ll suck but I haven’t used it, and they’re breaking the UI for the wrong reasons”.Such a quick transition from imagining someone doing something and then getting angry at your own imagination.
You can identify visual design changes just by looking at them... that's kind of the point
The central point of the article missed right over you. The critique is about the culture that surrounds: changes in UI for no real reason other than subjectivist opinions, design trends, fashion or what-others-are-doing, unoriginality, homogenization and frameworks, and the complete disregard for professional users and their infantilization.Furthermore, changes need to be evaluated against retraining millions of people with new UI. This part seems to be missing in the calculation.
>for no real reasonThis happens but stating that the Jetbrains changes fall under this category is baseless speculation.>This part seems to be missing in the calculationWhat makes you say that?I don't think anyone commenting here is in any doubt thatneedless/bad UI changes do happen in products. Noone's debating that general broad point. The thesis put forward by the article is that Jetbrains' changes specifically are an example of this trend. And it's very clear that the article is so lazily researched that none of the points listed do anything to support that specific thesis.
I think these are reasons why UI has regressed continually in last 10-15 years. No one speaks up. Usually casted as “UI always changes, get used to it. Grumpy people will complain for any change. See Gmail.” I can understand why Apple changes UI: it’s a luxury/fashion company that makes computers and phones.But a professional tool needs to follow UI changes that are not justified beyond flimsy reasons? Used by millions to make a living?The onus is on designers to justify their aesthetic/fashion instincts, to justify their tendency to churn user interfaces, the tendency to turn highly functional and dense tools into fisher price toys in the name of minimalism and infantilization users.
I agree with everything you said, but I don't see how it's relevant to my comment, unless you misread me?UI in general is regressed continually - completely agree with you there, yes.The article however is specifically about Jetbrains. Jetbrains may be regressing their UI. Perhaps someone should spend some time looking at Jetbrains' new UIs and analyse whether it does in fact constitute yet another example of regressed UI.This article doesn't do that - it makes a very lazy & exceptionally poor case.
Feedback noted, I don't think the new JetBrains UI is out for testing. I need to find time to write an extremely detailed post mortem of a user interface gone wrong. I did one for Apple a while ago although not as detailed as I'd like:https://neil.computer/notes/apple-ux-ui-is-regressing/and another rant on Google's mute button:https://neil.computer/notes/oh-sorry-i-was-on-mute/.More spanking is needed, there cannot be enough.
fwiw, those are both excellent articles & the macos notifications I found especially infuriating.
IS this new UI going to solve slow indexing problem? I mean, real problems, the ones that really block our work?
Zero trolling.  Can you give a real world example of slow indexing?  If you work in a /more/ dynamic language like Python, Perl, Ruby, JavaScript, it is very difficult to write a fast, accurate indexer.  However, for /more/ strictly-typed languages like C, C#, Java, Scala, it is much easier to write a very fast, accurate index.  (Leave aside C++ as it is so insanely context dependent, but LLVM has made amazing work of it.)Some anecdata, three times in my career, I have worked on massive 1M+ line of code Java projects -- single repo.  The initial Apache Maven download of dependent JARs plus indexing might take one hour or so.  After that: Lightspeed.  Yes, I do agree: When you are forced to invalidate your indexes, the next restart is painful.More anecdata: One of my current projects is Python 3+.  The indexing is much slower and less accurate.  Plus, we use lots of binary libraries (compiled native code), which seems to trigger indexing on each restart.  But whatever, get a 5GHz machine, give IntelliJ 16GB of RAM and let it run.  In 2022, are there any serious alternatives besides a Titanic-sized IDE for enormous complex codebases?  I don't see any that average developers (myself) will use.Last point to mix big IDEs with C++: Visual Studio (as much as a cringe writing anything positive about Microsoft) is a phenom platform.  For years, it absolutely dominated C++ IDEs.  IntelliSense was mind-blowing in C++ and force multiplier that was unmatched for many, many years.  It is still very impressive to me.  I am sure they feel JetBrains' CLion biting at their heels!
I work daily on a java 8 project with about 3k files, about 5k classes. Small in comparison.
When I have to rebuild indexes it takes about 10 minutes on a intel 12th gen w/ 32GB RAM, I configured Idea jvm to use 8GB RAM. 
It happens quite often when I have to add a dependency, somehow Idea project file get out of sync and doesn't update anymore.
When opening the project it takes about 1 minutes before being usable. Every time. I basically keep the project opened just in case.
I use Idea every day for about 60 different projects on java, kotlin, python, typescript, groovy... Idea is great, its features are much better than Eclipse or vscode, but with the latter I wouldn't have to wait so long when opening projects.
Jetbrains want to change UI? Fine, but as a paying customer I would like other things fixed, people working on UI is not working on other fixes to do.
is the new UI somehow blocking solving the problems that you mentioned? no. companies can work on multiple things at once.
People working on the new UI are not working on other products. These are not the same people who work with indexing, but these could be people who work on decoupling UI code etc. while indexing is improved.
That's what a maybe once per day coffee break is for.  Once indexed on the rare occasion I have to actually reboot or restart JetBrains products, I don't think I can recall ever having noticed indexing after that.
This one caught me out;- "The toolbar has less icons now" - It's customisable, you can put whatever you want in there. Yes, with colourful icons.I was wondering where the back / forward buttons were, but realised after a while that they can be put back in, just with some configuration.
Most of the time if some UI requires you to configure it, it's a badly designed product. With veryveryfew exceptions.
[...] - "The toolbar has less icons now" - It's customisable, you can put whatever you want in there. Yes, with colourful icons. [...]As someone who uses Rider, RubyMine, WebStorm (and sometimes PHPStorm) on a daily basis am worried that I now need to customize 4 IDEs (will they sync this config?). So until now I never wanted (or needed) to do that, now I have half a day work to get something I already have. I don't think that's progress.Why not make it customizable, but let the default be the current state?
With The settings repository you can share 90% of settings, as long as they are on the same platform.
I have also been using it for about 5 months and won't go back to the old one.  It's hard to design a new UI that will please everyone, but if Jetbrains only think about "old" developers (myself included), I believe their product won't be too attractive to the new generation.I enjoy the new monochromatic icons, I don't mind the extra gap, but I usually hide the panels and use shortcuts to access the panels.
Eh, I have used vim, spacemacs, sublime, vscode, atom, eclipse and netbeans. Jetbrains IDEs have superior functionality out of the box across languages and don’t require me to mess with and debug a million plugins. I don’t mind a UI refresh, it’s going to be just like the gmail refresh everyone hated it and now we’re all fine with it.I just wish they would invest more money into things that are actually a problem currently like how slow indexing is and how disruptive it is when you do a clean re-install and it indexes all your dependencies again.I have tried spacemacs which gives a lot of functionality out the box with less configuration needed than DIY vim or emacs but it still just doesn’t compare to the ease of use of Jetbrains IDEs across languages (I use Java, Python, Ruby and Typescript every week).
UI refreshes are a funny thing. I remember avidly hating the look of YouTube when they removed all the borders from things. And now when I see the old version, it looks quite bad and the current one very good.It’s an uncomfortable feeling to see something new, and sometimes it genuinely is a step backwards, but I feel most of the time it’s progress and you get over it after a month.
Same, the only refresh that I feel is genuinely bad is reddit. The problem with new reddit is that the usage pattern is totally different. Old reddit can be rapidly browsed and only the posts that interest you are the ones that you give attention, in new reddit posts can’t be rapidly browsed and each one is supposed to grab your attention (in my opinion).
It's not just Reddit, Gmail also got worse with time.Even now when I look at Gmail 2004 I find it superior to the current UI.
Controversially: I also much prefer the usability of older Windows operating systems, the scrollbars that don't hide, the double click semantics that are consistent across the whole OS.It might look a lot prettier now, but it's much harder to actually do things from zero knowledge, I do fear we've regressed.
I’m going to say something even more controversial, but true; that the obfuscated thing these two prior comments are really noting is a degradation that has been obscured in distracting color or design language changes. It’s akin to “shrinkflation” that is now even totally overshadowed by the real rise in prices they said wouldn’t happen, people are starting to notice things like “hey, why are there now far less features than 30 years ago, and why does it cost 10x as much?””New packaging, same great taste” the professional liars proclaim; as the box got emptier, the false bottom bigger, the air more voluminous, the filler lower quality. No, no. Worse things are in fact good for you. The party proclaimed it, so you are required to believe it. Or else.Even more controversial is both the cause and the remedy, for which the overwhelming number of people, especially on a site like this, have absolutely no interest in facing; so I will refrain from expanding on that. It’s irrelevant anyways, because the consequences are as inevitable as they were clearly predicted and suppressed.The abusive relationship that the western world in particular is currently in, remains largely furiously defended, like any other abusive relationship the abused have not yet faced reality about.That results in continued comments one can also see in these threads, proclaiming essentially how “no, no, degraded features and lower information density against my will is actually a good thing”, which is no different than “I would not get beaten if I just made smarter decisions”.
I'm happy enough to join the revolution comrade, but do we have enough men and guns to bring down the oppressors?
I hope you’re being Reddit brained, but the short answer is no, I do not see anything nearly like actually doing that. The trajectory is clearly towards the shadow of authoritarian control flowing over the whole of humanity. Don’t worry, you’ll realize it too once it’s far past way too late.
You might enjoy looking through the Windows interface guidelines from 1995 [PDF]:https://www.ics.uci.edu/~kobsa/courses/ICS104/course-notes/M...
Hence so many open source revival project of that UI. SerenityOS and many themes for open source desktops have a win95/win98(SE) look.
The fact that reddit still has old.reddit.com available is a testament to the failure of the new design.
IMO, it is not that the old reddit UI is very good, but the new reddit is just terrible.I wonder how many percent of users are sticking with the old UI.
Iirc, the figures for some prominent subreddits were shared and it was like 10% old Reddit, 20% new Reddit, 40% first party apps, 30% third party apps
I keep hoping they'd disable this and shut the API to rif is fun, then I'd be able to quit Reddit permanently.I kid, I kid.But not really.
The new design is bad intentionally to improve their performance numbers, that it's still online and that the whole site didn't go the way of digg means they pretty much nailed it.
I'd say a big part of this is the atrocious performance
Heck I still use i.reddit.com on mobile!
4 years and counting, blimey
I'm not sure how much of that is the UI, and how much of that is just that it's unbearably slow. I feel like the UI could work quite well if it actually loaded roughly instantly.
Changed aesthetics are fine. Even when they suck you eventually get used to them. Changed functionality - which with UI refreshes often entails removal of more advanced or subtle features - is the killer. Designers who don't understand how products work in depth look at complexity they don't understand and decide nobody needs it if they personally don't get what it's for.
It is a problem even when it comes to aesthetics. Turning up the whitespace 300% makes things worse, it's not even just a subjective design choice.The problem is precisely what you say: UI """designers""" don't make evidence-based decisons and don't do research or look for user feedback, they simply go with whatever they subjectively think best.
My issue is not with style changes but when stuff is moved around or renamed,  you update the IDE or a plugin and now when you go to amenu to access some function it was renamed or moved around , my musle memory is broken and I waste tiem  working to figure out where stuff was moved now.Don\t get me started on GNOME-iffication of apps.
I agree that youtube "looks" better but it's objectively worse. This comment reminded me of a video I saw a decade ago and could still easily find:https://www.youtube.com/watch?v=9u6Bfnq3aZk
> I don’t mind a UI refresh, it’s going to be just like the gmail refresh everyone hated it and now we’re all fine with it.We are not fine with it. It really sucks. It's just out of our hands.To this day I hate the gmail interface. It used to be so much better back in the day.
I’ve used gmail pretty much since day 1, but I can’t recall any of the previous interfaces. What were the good features of previous ones?
No wasted space. More colorful. More buttons.It was more pleasant to look at and provided more useful functionality on the UI.The modern trend of wasting space and erasing colors is really bad.The only new feature I like is the "tab" categories (but only on desktop). Though they really botched it because now I'm confused about the difference between categories and labels so I don't use labels anymore. IMO they should have used the existing labels system for that.
Fast and light which it currently is not.It was also pretty easy to find and read your email, which it currently is not.
You can still opt-in into the ancient HTML UI.
It's really lightweight and network-bandwidth friendly, but not having shortcuts for some basic actions makes it a little bit too arcane and sometimes way slower than just paying the resource costs.I wish there was a better balance between both UIs. The "better looking" one wastes too much resources (CPU, memory, screen space).
Thanks, I didn't know that, I think I'll switch it back.It's not about resource cost for me, I use high end hardware and fast connections (coupled with ad and script blockers, both in-browser and at network level, which are probably adding to the frustration) and not only does it load and run like complete crap, I literally couldn't find an email I knew was there in my "inbox" last time I opened it.I only use Gmail/Workspace for family/personal stuff so I just use mobile apps 99% of the time now, but if I had to use it more regularly I'd be quite annoyed.Not that Office 365 which I use for work is any better in a web browser.
At the bottom of this guide there are two links to switch from the current state-of-the-art design to the "basic HTML" version, and back, should you regret it:https://support.google.com/mail/answer/15049?hl=enThe "basic HTML" version is probably not exactly as any previous version but it's a good approximation. I think it makes much better use of color and space, and the buttons have text labels instead of using an arcane symbol language I have to relearn every time I have the misfortune to use it.
You can switch the gmail UI buttons to be text labels.
It loaded quickly and was snappy.
Which previous?https://mail.google.com/mail/u/0/h/Still points to the "basic HTML" version, which is at least faster than the standard one. (I use it, and I'll keep using it, until I can, I guess.)https://support.google.com/mail/answer/15049
Nah I'm fine with it, because I never go to the website and just use mail clients; I can tolerate you its existence, out of sight out of mind and all that.Actually I did use the web client one time recently and I literally couldn't find an email I knew I'd just received; my inbox is kept at 0 unread; so in theory it should have been impossible NOT to see it, right? After the initial confusion then annoyance came the realisation and I just went and found my phone to read it on.
> Nah I'm fine with it, because I never go to the website and just use mail
  > clients; I can tolerate you its existence, out of sight out of mind and all that.And that contributes nothing to this thread because we are discussing the Jetbrains UI and the Gmail UI was an analogy. Unless you would like to argue that we can ignore Jetbrains UI changes like Gmail UI changes because we can use VIM as an interface to the code, so the Jetbrains UI is out of sight out of mind and all that.
I'm afraid my British humour (sarcasm) may have been lost here.I'm neither fine with Gmail, nor with major changes to Jetbrains IDE which I've been using every day for years now, and totally agree with all of the points in the article (and by extension this thread).
> I'm afraid my British humour (sarcasm) may have been lost here.That's fine. Apparently you're no Eric Idle, but I'm no Einstein here either.
IIRC on desktop you can still use the old-ish (at least, plain HTML) version of gmail if you disable Javascript once logged in. At least it worked quite recently for me.
Yeah, but it’s the old non-plain-html version I want.
Yep, exactly. We tolerate it, and people forget how much better it used to be
> I don’t mind a UI refreshSadly it’s not actually just a UI refresh but a UI downgrade because they’ve actually removed key functionality, not just tweaked some visual styling.It’s a completely different tool window layout mechanism with far fewer tool windows that can be open at the same time. I rely on having my source control, embedded terminal, problems window, commit window + more all simultaneously visible. It’s key to my workflow to have a number of key windows open and their new layout throws this all away.So far its the most disruptive and user hostile “UI refresh” I’ve ever seen and will see me moving back to Visual Studio if they persist with it.
Full UI redesigns are usually as much of a fail as code rewrites or even more...
Can't you tear off specific bits into their own windows?
Switch branches? Let's index it all again!
Working on a Rust project? Let's index the Go stdlib.
It'll be ready in 10-20 min, please hold.I've been waiting for indexing improvemence for over 10 years, not holding my breath.
You want to run a task from your build tool that has nothing to do with indexing before indexing finishes? No can do!You installed an npm package and it seems to depend on all the things? Let's start indexing on node_modules and give you no chance to even uninstall the **er. You used the CLI to work around our tooling? Hey let's start indexing immediately after this one finishes so it's a great idea for a coffee break, just never pull directly after coming back so you may actually do some work until we bog down all the cpu cores.Don't get me wrong, I love all the JB IDEs, but indexing has been a deal-breaker for many.
> so you may actually do some work until we bog down all the cpu cores.I wish it bogged down all cores.. I work on relatively small Java projects (maybe 10 KLOC, 20 or so items in the pom.xml (although these obviously have transitive dependencies)). IntelliJ 2018 would re-index everything in a few minutes using all 20 vcores. I specifically spent about $8k on an iMac Pro back in the day to make this faster.IntelliJ 2022, on the other hand, uses only 4 cores, and takes about 10 minutes. That's a stupid default (if I buy a powerful computer I want to use it..).There is a setting to override it, but in my case it just doesn't work. CPU goes to approx 400% and just stays there. I filed a bug report, no movement.
IntelliJ reindexes existing jdks and the whole spring ecosystem on my system, daily.I think their developers have no idea how it works either and just gave up some time after the useless shared indices came out.
Do you have enabled "Public shared indexes"? It should be able to download pre-built indexes for both JDK and many Maven libraries.
It's on. I just switched to an IntelliJ window that hasn't been used for a few days and -indexing!
Do I just have a really fast computer (I’m using a MacBook Pro)? I’ve never experienced this indexing issue.
While not quite 10 minutes, I'm on a 12 core i7 Dell XPS, I have to switch between half a dozen or so Go projects in a day sometimes and it really can take a couple of minutes each; long enough to be annoying, not long enough to grab a coffee.Edit: I should say 12-thread, not 12-core, just to be clear on the performance level we're expecting here. It's a 6c/12t i7.
Maybe. I used to be on MacBook Pros back in the days when I was working on Java and indexing was the bane of my existence.
I usually worked with 3-10 big Java projects in parallel (e.g. HBase, Hadoop, Hive, NiFi, Kafka) and indexing could (not exaggerating) take up to 4 hours in total. NiFi is one of the worst offenders. And switching branches means it starts all over again.I haven't worked with Java in ~2 years so I'm not sure how bad it is now. I might start a NiFi index job just for fun...
I'm on a MacBook Pro with M1. Indexing is a pain in the ass for me.
I use Clion for C/C++ and Rust (with the rust plugin) and indexing seems fine. PHP, Python, Ruby and Go have been generally miserable for me.
I use Rust in IntelliJ, and the indexing is usually fineonce the IDE is up.But for some reason, whenever I reopen a project, it needs to reindex it. Even when I open the same project every day, not having changed anything in between. I understand from a friend it doesn't do that with Java projects.
Hi! There is definitely something wrong going on. It'd be great if you file an issue athttps://github.com/intellij-rust/intellij-rust/issuesand attach your logs. We'd like to investigate this.
> I understand from a friend it doesn't do that with Java projects.Sometimes it does. I have no idea what causes it.
Same. Typescript, Python and Ruby are so painful for indexing especially if you use a workspace based build tool at a big tech company.
Indexing performance has drastically improved for me in the last 1-2 years, to the point where it's become a non-issue. New projects index very quickly, and adding new libraries also indexes quickly. It's an order of magnitude better than a few years ago.That's both on my 16-inch M1 Max and my M2 Air with Go in Goland.
If you are a professional developer, and plan to be working for several decades, is it really that much of an investment to maintain your editor config a la vim or emacs? I did a lot of work setting up vim 10 years ago, and have only had to tweak it since. It works exactly as I expect, anywhere, in a terminal, for free, and setup is as easy as checking out a repo and running a script.JetBrains is good for stuff I rarely do in the editor, like certain types of debugging, but otherwise feels too heavy, expensive, and hard to configure across installs. Finding a particular config option is always a hunt.
Honestly yes, I would rather pay someone to do it than maintain it myself especially across languages it just becomes a real nightmare. I need text editing, jupyter rendering, sql client, csv spreadsheet rendering, vim keybindings, git client, terminal/ssh, autocomplete, documentation tooltips and “run highlighted in repl” support at a minimum. These are all part of my weekly workflow, I have tried to use spacemacs because the community has setup a lot of this stuff for you already but the autocomplete is not comparable to VSCode or Jetbrains.My dad was a vim user since the 90s and he ended up switching to IntelliJ a few years ago as well. It’s just significantly less hassle and has way more intelligent intellisense/autocomplete.
I have only recently tried GoLand while living in vim for ~5 years. IMO vim's autocomplete issignificantlybetter than GoLand. Not saying the rest of the auto-insert helpers, but the completion itself is way better imo.
GoPLS is honestly really good, and while I haven't tried GoLand myself, I have no trouble believing you. Even rust-analyzer beats IntelliJ Rust IME. I'm very bullish on language servers because these two (and ElixirLS, though it isn't on the same level as GoPLS and rust-analyzer IMO) are countering the common assumption that youneedan IDE to have powerful dev tools.
My experience is absolutely the opposite, especially on complex Go projects with multiple modules. I haven’t given Rust Analyzer much of a shot, but admittedly that might be better. Many of the projects I’m working on right now build using Bazel, and gopls has serious issues there even in generated code with a package driver configured.I used to meticulously maintain a vim config for the 8 or so languages I switch between, but eventually realised that for me the good part of vim is modal editing, and that IdeaVIM gives me that without having to fuss with it. My vimrc is now empty and it’s relegated to commit messages and fixing merge conflicts…
Quick tip: you can sync config across devices using File > Manage IDE Settings.One option is to use their sync service with your Jetbrain account, but you can also use git[1]It definitely makes it easier to move machines when your settings and plugins are kept in sync with it.[1]https://www.jetbrains.com/help/idea/sharing-your-ide-setting...
I'm constantly surprised that people have trouble finding things in JetBrains IDEs, because they have search everywhere, for everything. You can even look for "actions" in the double-shift menu: just press Cmd-Shift-A (I suppose Ctrl for Win/Linux) and type a few letters. I found that way easier than figuring out how to configure vim, because there is no discoverability from inside the editor itself, and I frequently had to google several times before I found a way to get the behaviour I wanted. This gets even worse when you're using plugins for LSP etc.(Emacs, of course, has best in class discoverability via M-x and C-h, which allow you to find and introspect basically everything that's available to you, but then Emacs is an OS, not an editor)
> Finding a particular config option is always a hunt.Do you know you can search for an option in the settings menu?  Actually, you can search just about everywhere.You can also set your IDE to store your config in a git repo so that it's the same everywhere you use it.
That’s funny, because I’m always skeptical about people who fire in all judgy about the way other people work when they know literally nothing about who they are or what they do, and Iamalways right.
I think that parent’s point was that debugging is an exceedingly powerful tool, and therefore leaving it out of your toolset by definition makes you less powerful as a programmer. It’s not even such an esoteric skill - operating the simplest kind of a GUI debugger is maybe learning 5-6 different actions, and the IDE often takes care of the details of setting up the debugger for you.
I don't know that I'm convinced of that point though. I've been developing software professionally for almost 20 years and my usage and reliance on a debugger has decreased over time. At the moment, I think it's been probably three months since I've last used one.
This. I used to use debugger all the time as a more junior dev, but I haven't used one in years now. Also, over time I spend more and more time writing tests. When there's a problem a simple print, echo, console.log or whatever is usually enough to solve it quickly.The problem that debuggers solve is simply not a big problem anymore, in my experience. Definitely not worth the setup hassle when actively working on multiple platforms.
On the contrary, I find a common debugger (see questions below) an underwhelming experience, not a powerful tool.Can it:- assign (scenario, subsystem, level, description) to breakpoints and watches, so they can be turned on/off or selected in groups for debugging without removal?- commit these scenarios of bps and watches into a repository?- edit/read them in a textual form to patch or share over an IM?- store traces of previous sessions and diff them to find out what changed?Does anything even remotely similar exist? Most debuggers are just test-pause-and-inspect tools with “integration” in the form of eval on mouse hover. Their ux and dx sucks and the only reason I could find to use them were slow build times and too low-level runtimes, which are no more today.Pretty sure most people avoid debuggers not because they are too hard to learn (they aren’t), but because they are too dumb to be useful, given that you can ‘if (cond) log.level(…)’ and restart instantly.
> - assign (scenario, subsystem, level, description) to breakpoints and watches, so they can be turned on/off or selected in groups for debugging without removal?In Jetbrain's tools they definitely can.  I can* create a bunch of breakpoints* give them descriptions* only have them break on execution under certain conditions (conditions stated via the programming language being debugged, so `my_struct.some_func() == 5`)* disable and enable breakpoints with a click of a button* have a breakpoint only become active when another breakpoint got hit (and therefore only cause the debugging logic to execute in certain code paths* Have a breakpoint not stop execution when it gets hit, which is useful because I can then* Log when a breakpoint gets hit, including it's stack trace (so I can see exactly the flow that got me to that breakpoint)* Evaluate some variable when a breakpoint is hit and log that evaluation.All of this with an extremely simple UI that can be manipulated without any recompiles and while the application is running.  I've gotten tons of value of debugging complex scenarios in both C# and Rust via this constructs.So while I'm not going to convince you that debuggers are worthwhile, to call them "too dumb to be useful" is pretty naive.
Well, this is good to learn. I skimmed through intellij debugger docs before writing that comment and didn’t find anything like that. Thanks!
A screenshot showing the UI for this ishttps://resources.jetbrains.com/help/img/idea/2022.2/cl_brea...(fromhttps://www.jetbrains.com/help/clion/using-breakpoints.html).  Though that screenshot doesn't show the description field, which definitely exists on my CLion build.
That’s a fine opinion to hold, until you work on applications that you cannot debug for one reason or another.As a fellow debugger lover, having to basically use log statements instead of being able to reach in and debug was a rude awakening. Some people probably don’t know that debugging can be easy with the right combination of IDE and language. Or the billion software layers mean that the debugger fails to attach for some reason which can’t be figured out.
I have a decent experience in all sorts of debuggers (from softice to gdb to ide) and prefer log() where possible. The reasons are: less-ing a log is superior to stepping into. Step-based debugging doesn’t work in production or retrospectively. That’s it.
This kind of post is unhelpful and unnecessary.Debugging and using IDEs are entirely orthogonal. DTrace and lldb are far more valuable to me than a graphical step debugger, which I effectively never use. As it happens I use JetBrains IDEs full time.
I mean the Gmail refresh was awful, and remained awful for many years until a new refresh a couple months ago that VASTLY improved it. I love it now.
Getting used to a new look is possible, but that does not mandate disrupting - no, that is not a good thing! - changes. Just for the sake of it along questionable long explained philosophy. This is actual work not beauty contest.Especially in cases when much more important tasks are at hand, as you rightfully note.
Try to debug JNI code in Jetbrains IDEs, go try it. Ah, I forgot they rather sell a Clion license instead.Or stop the damm thing to run indexing, or avoid doing 10 finger combos, showing code problems without running inspections, doing Java compilation on save without using Eclipse's own compiler,...
> showing code problems without running inspections
You can configure which inspections are run all the time and which are not> doing Java compilation on save without using Eclipse's own compiler
If you are saving files with Intellij. Configure Intellij to save when focus is lost. I haven't pressed Ctrl-S in 15 years in Intellij. Regarding the automatic compiling whenever you save, like in Eclipse. I am really happy it doesn't do this. Because it means I can work slow compiling projects at all. I can work with refactoring features while my code is in the middle of larger refactoring and it doesn't compile. And so on. But if you prefer Eclipse's workflow, why not use Eclipse?
> I can work slow compiling projects at all.Eclipse has incremental compile. Only parts you changed are compiling and it is not slow at all.> I can work with refactoring features while my code is in the middle of larger refactoring and it doesn't compile.That works in Eclipse perfectly well - except that code completion and suggestions are much better then the ones you get in Idea.
I certainly do, thanks very much.Incrementally compiling on save, is hardly noticeable versus continuous indexing.
If I had a nickel for the number of time I accidentally deleted an email in the new Gmail interface, I could buy out Google and force them to git reset it back to the old version. I for one (of many) are not fine with it.
I don't know, why bother with such a slow bloated thing when it can't even get some basic stuff right that you just expect to work?https://youtrack.jetbrains.com/issue/WEB-57184/wrong-warning...Found that while searching for the same problem
The git client is easy, the db and docker clients are useful, the kube integration is useful, ideavim is pretty seamless, the autocomplete is great, the jupyter and scientific modes are perfect, the remote debugger and remote interpreter thing is very useful, the debugger is great across languages…I mean there’s so many things that are good and I get them all uniformly across languages without needing to hassle with configurations and plugins.I did make an attempt to be the million line vimrc, t480, arch Linux guy (from reading HN) for a month or two but I found it was taking up so much time it was basically a hobby. I would rather just have something that works out the box (Mac + jetbrains) and be able to spend work and hobby time coding interesting stuff.The fancy vim configuration just becomes more and more frustrating the more languages that you use and you start to run into weird things like when you start a new line in markdown the cursor doesn’t start at the same bullet indentation level so now you need to debug which plugin is messing that up.
I am on the same page as you. I also have tried spacemacs, but it either installs or doesn't depending on what OS I'm on. I secretly wish someone would make a bundled installer for it for Windows so I dont have to figure out the terminal incantations to make it work on Windows. I've also managed to mess up the initial setup on Linux too.
> Jetbrains IDEs have superior functionality out of the box across languagesThey dont, not compared to eclipse and java. They are more lightway and look nicer, but it does much less for you. (The default call hierarchy is just atrocious for example, you can see only problems from small part of project etc)
> how slow indexing is and how disruptive it is when you do a clean re-install and it indexes all your dependencies again.Or if your Linux laptop doesn’t actually go to sleep (and goes flat) and PyCharm needs to index _again_ on start!
> it’s going to be just like the gmail refresh everyone hated it and now we’re all fine with it.I'm not fine with it. It's still an accessibility DF for me, and I use HTML mode, despite it being semi-broken.
I'm still not fine with gmail.
I still hate the gmail ui but what can I do about it?
Seriously! Their slick, compact, and beautifully well laid out UI is one of the primary reasons I use I Intellij Idea.If they force this update, I'll just not update it. Not to mention, since I now will not be updating it, I can cancel my yearly, recurring subscription too.Hey Jetbrains: You just have to do one thing. And that is: to NOT mess up existing thing.Even if you stop launching new features into your product for next few years, I'll still happily pay you folks just because your product is so damn perfect as of now.Please don't ruin it. Forget what VSCode is doing. They are far far far behind you folks. Don't let THEM ruin your product.
> Seriously! Their slick, compact, and beautifully well laid out UI is one of the primary reasons I use I Intellij Idea.Fascinating. Their flat, contrast-less and confusing UI is one of my biggest chafing points with their product. If I want to resize an UI element, I often have to make several guesses before I find the right border, let alone pixel.
Their UI may be a bit low contrast out of the box (there are themes to fix that, luckily) but if you have a problem with it now, the new UI looks much worse. All the colors are gone and all the icons are now bland shapes.It looks like they're copying VS Code's UI style which is a huge step backwards in my opinion. This UI minimalism looks great on paper but it's terribly confusing to actually work with and it can take weeks to get around it through sheer brute force and muscle memory.I agree that their UI needs an overhaul but this isn't the solution.
Flat UIs, icons with no text, and countless undocumented features are the reasons I now hate using computers.The mental overhead in trying to learn and remember what to click to achieve what I want is exhausting, and somehow, in far too many apps, there's no way to look-up what the shortcut keys are.
What are the odds of a redesign adding color / borders / 3d? The UI fashion is still trending towards a uniform single-colored surface. Hard to imagine them adding borders, let alone color
Probably not great, but still by necessity better than the odds of the UI improving while not changing at all.
On the flip side, the only thing I want Jetbrains to do is implement proper UI scaling.I want to be able to hit Command+Plus and scale up the whole interface for presenting something to the team or when I have to code pair with someone who doesn't have as large of a monitor as I do.Presentation mode is an absolute mess, and does not help with code pairing or code review presentations, and font scaling only affects the one file and not all the fonts, so the project navigation is still small and I have to repeat it for every file and again in reverse to reset it.And the best past is, they could do it without impacting anyone else who doesn't need it, unlike this proposal.
> On the flip side, the only thing I want Jetbrains to do is implement proper UI scaling.Oh man I'm still mad that if I want to present my Jetbrains IDE screen and make it readable, I have to change 2 fonts, one for the editor, one for the interface.
It's nice that it's being an accepted point of view this time.Usually I get a lot of aggressive responses about how I don't understand presentation mode. I do, and it's crap.
By contrast, I only want the content to scale, and actively cannot stand entire UIs scaling and looking and feeling like web pages. If this was ever implemented, it would need an opt-out to please us both.
Which is fine. As I already mentioned, even if they just had a text scaling which applied to all the editors so I didn't have to keep doing it every time I opened a file that would be a massive QOL improvement.
Shift shift -> Enter Presentation Mode.(Replace shift shift with whatever you have the “everything” search bound to).
Presentation mode is terrible for doing code pairing, code presentations, or really anything that involves screen sharing.
Presentation mode has worked well for me for code presentation for a decade both in-person on a projector and for screen sharing, across hundreds of talks. If you believe otherwise, let’s hear why rather than some kind of assertion that it must be true because you said so.For the others… well, it’s not called screen sharing mode or code pairing mode.
> For the others… well, it’s not called screen sharing mode or code pairing mode.So you agree that it doesn't work that great for the scenarios that I've been talking about?
But great for the scenario that the person I actually responded to described.
Curious why is that, what are the pain points specifically? I use it often when presenting and the only downside is that presentation mode forces full screen (on mac)
I lose my terminal, file tabs, project navigation.For presenting, it isveryspecific on how it is meant to be used, which is not how I would present during a screen sharing exercise.
That's not entirely true, you can bring up all of those (maybe except tabs, I don't use them) while in presentation mode, you can do that with all windows. They even have bigger fonts so they're also readable
I would not like Command-Plus, as in most cases you want to increase the font size of the editor, not everything around it. Then it would work like a web app or an Electron app, which is not ideal for pro apps. But I think you do have some good points around the presentation mode.
I am perfectly fine with it scaling everything, it would certainly be better than the current situation.Sometimes, especially when I'm pairing with a junior that has a smaller screen, I want to scale everything because I want them to see everything. In this case scaling the whole UI is a benefit even if it is a "pro" application.YMMV, and having alternative but consistent scaling options (such as all text in the file editor rather than piecemeal) would be a massive step up from the chaos at the moment. As already mentioned, the best part of this feature rather than a full UI redesign is that you don't have to use it!
> Forget what VSCode is doing.Except for remote development extension.  Do that.  It's the killer feature of VSCode.
They do that, I’m playing with it now. Have a look at Jetbrains Gateway:https://www.jetbrains.com/remote-development/gateway/
I'll admit I haven't looked recently, but last time I looked, it felt like Jetbrains didn't quite get my use cases for remote development. I don't want to install/manage any infrastructure at all. I just want to connect via ssh to a fresh box and have it work. If that isn't possible, back to the drawing board.
Does it work with Rider yet? At launch it didn't, something to do with Rider using (or not, I forget!) an out of process language server.
It’s supposed to work (like, it’s an option in Rider’s project selection), but it can’t find MSBuild in the WSL. I’m guessing you’d have better luck if you just spun up a normal Linux VM though.
How is it working for you? I tried the beta version last year and I was not impressed. Is it worth trying again?
I found the performance very poor and had to discontinue using it.
It permanently pinned 4 cores on the remote server where VS Code used <0.25 (codebase was a very small Django app)
I tried out fleet last night and it worked amazingly well.
Why would one do remote development with laptops being as powerful as they are today (think: the raw power of an M1 Mac Book Air even).
Because my ec2 dev server is even more powerful, and I can easily upgrade the hardware configuration  without spending $1k on a new laptop.I never really appreciated a remote dev server until I had to work on a behemoth Java project and then a behemoth C++ project. Having the extra memory and the extra cores is great. Never having to worry about your laptop heating up or having your battery die due to CPU load is even better.
I guess if your IDE is as responsive as anything else locally and only the compiling and runtime happens in the cloud it might be somewhat pleasant to work with. But what if you decide to do something from a coffee shop and the WiFi is super laggy. Or doing something while traveling etc. I like to know that my dev station is independent of an Internet connection.
With crappy Internet connection you still can do remote development (it doesn't take much bandwidth, after all it's mostly text). But what if you need to download dependencies/docker images or upload e.g. docker image? With a remote development you can offload that to a beefy server with gigabit connection.
That is indeed a good point.
"Remote development" does not necessarily imply that development happens on a remote machine. I use remote development extensions to work directly on projects inside WSL2.
Same here. 'Remote' development for me isn't about how far away it is, it is about developing across (virtual/container/cloud) 'machine' boundaries.
Company policy, network topology/firewalls, having to run things in a terminal on another machine (which is already there with remote development).
7950x
Last time I tried remote development with PyCharm was when they released their "Remote development" beta in version 2021.3 [1]. It was a bad experience. Before that they only had some complicated sync workaround for remote development which I could not get used to.I gave up on remote development with PyCharm and went with VSCode.Based on your comment it seems they still haven't figured it out?[1]https://www.jetbrains.com/pycharm/whatsnew/2021-3/#remote-de...
This is literally the only reason I use VS Code right now.
JetBrains has Code With Me, in case you hadn't seen that. I have no idea how they compare, though, so I don't mean this as a dismissal.
> Except for remote development extension.And the roads.
Indeed. I think they are trying to imitate VSCode UI... which in my opinion sucks big time.
We need to apply Chesterton's fence [1] in situations like this.[1]https://en.wiktionary.org/wiki/Chesterton%27s_fence
I've actually used the new UI, on Rider and WebStorm on Linux. It's not bad, and majority of changes make it more usable. When I go back to an older install, I prefer the new UI.- Increased margins/padding: At first, I thought it was a waste of space - but things are now easier to click on. I realised this when loading an older version on another machine. I'd still like to be able to tweak this - the document tabs are too padded.- The main menu was hidden inside a hamburger menu. This was nasty - fortunately there's a "Show main menu in toolbar" option. This really should be on by default for non-mac.- I wasn't keen on the darker colour scheme, I switched back to the old dark - it took less than a minute to learn I actually prefer the new one.- Can only have 4dockedtool windows open at once (2 side, 2 bottom).- Toolbars are easier to customise, but I wish I could combine the navigation bar into it, as I only have a few buttons on the right.- The bright blue "run/debug" toolbar is distracting- I've not noticed any removal of colour from the menu icons, and there are no animationsOverall, there isn't much to be upset about - took me minutes to get used to, no nowhere near as bad as the Visual Studio 2013 UI refresh.
Can you split vertical panels? Like project files on top half and terminal on the other half? I haven't found this option on early previews and haven't had a chance to play with it again.
No. Only 1 left side, 1 right side, 1 or 2 bottom. No splitting/combining/tabbing.You can still have them floating, then whatever layout you want - but it's not the same.This is the worst "improvement", by far.
I love how all the panels/windows in Jetbrains are just text. Like "run", "maven", "database", "terminal". The new icons take up more than twice the space (thickness vs the vertical text), and conveys nothing at all about what they do.Also one of the reasons I'm not that thrilled about Fleet. I get it's easy to just in general be negative to change. But these are professional tools. I've used it for over a decade. I don't need it to be dumbed down.Right now I'm comfortable and never enjoyed VSCode and others. But if I'm forced this change, what's stopping me then from trying a completely different IDE?
From their FAQ:Will Fleet replace any existing JetBrains IDEs?
    
    No, it will not. We are fully committed to continuing active development of our IntelliJ-based IDEs. With Fleet, we’re aiming to offer an alternative view on how an IDE can be organized, and this is impossible to implement within our current product line without going against the expectations of developers currently using those other IDEs. This means Fleet will co-exist with our established products.
    
    Additionally, Fleet heavily relies on the IntelliJ code-processing engine for its smart code-editing features, such as project-aware and context-aware code completion, navigation to definitions and usages, refactorings, on-the-fly code quality checks, and quick-fixes.
This is something else:While Fleet is a new product representing our attempt to rebuild the entire IDE from scratch, the new UI is a redesign of the existing JetBrains IDE product line.~https://blog.jetbrains.com/idea/2022/05/take-part-in-the-new...
> This means Fleet will co-exist with our established productsThis means it will take resources away from the development of the established products. You cannot have the cake and eat it.
Fleet has been in development for multiple years. It has already "taken away" dev resource. It is not my our job to micro manage their  dev resources.
> It is not my our job to micro manage their dev resources.But my job does include heavy use of their tools. And I have dozens of bugs filed on the Jetbrains IDEs - some minor but some major. So in fact their allocation of dev resources does affect my ability to do my job, even if I'm not in charge of allocating their resources.
You can vote with your wallet though.
100x
I'm the same on icons vs text. I read the text label and "know". An icon is horrible as I find them meaningless, so I have to click or hover to check for tooltips.Another reason icons suck is that different apps use the same or similar icons for different things, my memory just doesn't "click" with simplistic icons.The old UI is information dense but easy to work with. It is one of the reasons I went to and paid for Jetbrains on my own dime, rather than using VS Code like others at my workplace.The new UI looks nice but it won't work well for me. If they want everything to be so similar to VS Code then I might as well use that.
If they end up removing the current UI I’ll end up cancelling my subscription. I’ve been a very happy paying customer for over 8 years now but this is ridiculous.The current UI has text (!!) tabs instead of bland non descriptive icons. It has toolbars and menu items that I can configure.I understand that the current generation of new developers are intimidated by so much raw power at their hands ;) But we have got to stop dumbing things down. It is killing a lot of experience and knowledge and will come back to haunt us as a society.Jetbrains is currently THE reference when it comes to professional IDEs, changing what they’re doing will not go well for them :-(
Based on how they interacted with the users when they removed the colors for the icons, I don't think they care about user feedback and will just post made up reasons for the change ("colors are distracting when coding").
>I understand that the current generation of new developers are intimidated by so much raw power at their hands ;)The new generation is fucking things up for us. Text > icons.
I actually _really_ like these changes, but then again I was previously a VS Code user. I think JetBrains is specifically courting users who, like me, don't deal well with user interfaces that utilize large numbers of text labels. I think they're catching up to "modern design", and trying to skate to where the puck is so to speak.However, I do want to point out that I don't think the author has actually used the new UI considering they mention the overuse of animations, considering that the new UI doesn't have _any_ as far as I can tell.
I haven't really used VSCode, so I can't really compare, but as a long time user of JetBrains IDEs I too really enjoy the new interface.I mostly use keyboard shortcuts and when I don't know the combination, I rely on the Search Anywhere (double shift) and Run Anything (double ctrl) functionalities.I find the new UI less distracting and the new VCS menu is a nice addition.I also wonder how much technical debt has accumulated in the previous UI that is being addressed by a refresh.
> user interfaces that utilize large numbers of text labelsThat, happens to be exactly what I want (icon + label for most things).
I really like the new UI (and all the other similar modern UIs) and I just can't pretend like I dont.I'm a very visual and a design oriented person and I want my tools to look good. If I'm going to spend countless hours using a product/tool I want to enjoy it's looks as well. Too many tools in my opinion are designed by people who want to maximize productivity with very utilitarian and practical user interfaces (which is great!) but don't seem to have enough care for making something that looks beautiful at the same time.
I was in the private beta for it, I went into it neutral and came out of it really liking it, all the keybinds remain the same and I already had turned off quite a lot of the old UI so for me it felt like what I already had but more refined.As with all things design, it's open to a large degree of subjectivity.
Beautifulon top ofproductive and utilitarian : yes.Beautifulinstead ofproductive and utilitarian : absolutely NOT.
I love Jebrains IDEs. They can save you lot of time. For example, VSCode does not even come close to Jetbrains git branch comparison. It's insanely good. I think a proper IDE is always better than adding 10s of extension to get similar functionality from VScode. Even then it does not compare to the beast that is Jetbrains IDE.Jetbrains should keep working on their own thing instead of trying to change because of someone else. This holds true for people as well.
Me too, I don't think I can function without JetBrain products as an engineer. It is ridiculously powerful. PyCharm + Database tab + Debugger + Little calculator icon for impromptu interpreter + long tail of features that totally make it amazing. I don't use built in Git but I heard that's great too. The database feature has stuff like copy results of a query as INSERT statements. Mind blown.
The built-in git is honestly quite intuitive while still being pretty powerful. I haven't tried other GUI-like git integrations but I was a fan of IntelliJ's.That said I was talking to a friend about how great it was and he was like "yeah all these things you describe seem like they were lifted from magit" so I suppose once again the answer is "magit is still the best".Maybe if I ever have the motivation to actually set up an editor I'll try Spacemacs again but I get frustrated when things don't just work and end up going down the configuration rabbit hole anyway.
As a VSCode user, I can see myself switching to Jetbrains because of these changes. Doing the occasional Flutter project, I always use VSCode for that instead of Android Studio. I just can’t stand the clutter and UI bloat in classic IntelliJ. I’m often on a 15“ screen, maybe that’s a contributing factor.
Yet another another great product that is falling prey to the newism ideology where change is almost worshipped for its own sake. You see this problem everywhere nowadays from Cinemas to architecture. People have lost the ability to appreciate timeless designs. Another good example of this is the new Apple iPhone 14 pro hole. To many it is better because it is newer. Never mind that the fact that there is actually now a narrow band of useless pixels at the top of the hole and overall contiguous vertical center screen height is reduced.
It’s not change for change‘s sake though. People are migrating towards mobile displays and actually doing work on those - as small as 11“. IntelliJ doesn’t work well on those displays. I‘m not saying we shouldn’t have both options (eg minimal mode and pro mode or whatever).
I used Eclipse on an asus eee901. It was fine.
Eclipse wasn’t optimized for 4K displays as IntelliJ is now.
> People have lost the ability to appreciate timeless designsSo they weren't timeless.  If they were, then the appreciation wouldn't have been lost.
So company internal proof of work produces UI Components, that over time make a "breaking" change necessary destroying user work worth in the billions and a pr-word of mouth disaster.
Worser still, all those features accumulating over time (nobody deletes codes) destroy the product.
So as a product manager you can
a)Anticipate it, create UIs that allow for large scale changes without breaking the old user flow and automatically prioritize hotkey-commands by user usage if there is a conflict. You also need to stop the Designers from going amok, rendering the whole tutorial section of your product on youtube obsolete. It will always be a paint point, but as you anticipated the bloat on success you integrated it into the architecture.b)
Phoenix Lifecycle it. When it all becomes to much, a smaller, more lightweight version of your product emerges out of the ashes, capable of integrating the newest, shiniest changes, without having the weight of all the bloat, it is first ignored, laughed at, finally emulated and it becomes your new product. 
There it slowly aggregates the same bloat, waiting for a challenger to appear.
Its inevitable.Is your IDE still a program, or is it in fact a OS for interacting addons and a really hungry text editor?
I honestly like it. IMO IntelliJ UIs were unnecessarily clunky. Vertical text was weird, and hard to read for me on higher resolutions, along with really small icons that forced you to actually parse the list for what I need. If you’re on a small resolution and have a lot of tool windows on the left side, the upper left tool window text and lower left texts runs into each other. Bottom bar was inconsistent, the items on that bar constantly change. 2 bars of vertical text, and an endless bottom bar, it felt like they were trying to back my editor into a corner. After using it like that for years, I finally gave up, just disabled most UI components and tolerated suboptimal keyboard shortcuts for finding and using tool windows. This UI update for the first time feels like I’m not flanked by clutter in a Jetbrains IDE
These up trends make me nuts. Just like so much of apple’s desktop apps like App Store are removing classic list interfaces with two column collections views. Totally non standard, so lacking all of the useful filtering/alerting by column, etc.Why?? For more white space.
> Removal of color from icons.Software is getting very depressing as designers decide that everything needs to be shades of grey. It's really sad.
IMO it's a usability issue. Instead of scanning the UI for a color+shape, there's only a shape. It's less distinguishable from the other icons, so I'll be slower to find it on the screen.(Similarly, this also bothers me with the PS5 controller. The triangle, circle, square and X buttons no longer have different colors. This might not be an issue if you're already familiar with the button layout, but I bet it makes it more difficult to learn for somebody that is new to the controller.)
Agree, color+shape is important in finding things. I rather like the way thunderbird went recently with the important folder colors. Much better. Moving away from that is a step in the wrong direction.
Maybe I don't understand the praise but the JetBrains UI is one of the most clunky UIs I've ever used for coding. I'm honestly glad to see something more VSCode-like in Fleet.
I agree that some areas are very clunky. But overall, as a Java developer, I am just incredibly productive in IntelliJ. Such that I happily take the rough edges for granted. Happily.
I agree. The only reason I find VS Code somewhat interesting is that the UI is a lot smoother. But if this is going to be a new look on top of the same old molasses that is Swing, then I don’t see the point.
It is going to be Swing.
Yeah, I figured they were rolling the turd in glitter one more time.I’d love to see their IDEs re-platformed on Electron. I’m not ordinarily a fan, but VS Code has shown us how good an Electron-based IDE can be (while Atom showed us the opposite).
> I’m not ordinarily a fan, but VS Code has shown us how good an Electron-based IDE can beyes, if you invest hundreds of millions of dollars and spend hundreds of man years on trivial things like "we can't make terminal output fast because web tech".Do not mistake a single success story achieved through insane effort and unlimited money with "this is the way".
It was definitely a breath of fresh air after using Eclipse.
After years of using IntelliJ I finally moved to VSCode.IntelliJ simply could do C/C++ but they chose to push people towards a new IDE... C Lion. That was a huge blow for me, a polyglot.Then I had a couple of bug opened with them... it took years for them to fix it. Except they marked it as fixed and it was indeed not fixed... Years later!I kept paying until that point, I just couldn't do it anymore.The company is a victim of its own success if you ask me. And that's a shame.VSCode isn't perfect, but it does 90% of what IntelliJ does, and arguably 40% of it better. Also VSCodeis fasterwhich still boggles my mind as to how that's possible. I suppose the buttload of cash that Microsoft has thrown at it probably helps there... Since IntelliJ went through their "milliseconds latency blabla" years ago, it's gone downhill.I imagine that retina pixel displays + java 2nd class child on the macOS platform = big oof (pre-metal).I dream of a native vscode-like IDE...
I use VSCode a lot and can say that for my specific use cases, it's still a decade behind or more. The debugger in VScode isn't even in the ballgame.I found the slack support for JetBrains to be absolutely fantastic. Super helpful and very technical. Having written plugins for both VSCode and JetBrains I prefer the latter but I have a heavy Java bias.I agree that the multi-IDE strategy is problematic. They usually offer an option to just install plugins but with CLion they kind of dropped the ball. Which is surprising because I run their rust plugin on IntelliJ and it works well. Hopefully they'll address that too.
Huh? If you buy the full IntelliJ you get all the modules. It’s no different than running CLion.
Nope, you don't get everything. I don't use CLion, so I don't know what all the differences are, but for the Rust plugin, CLion gets more functionality than IntelliJ:https://github.com/intellij-rust/intellij-rust#compatible-id...I understand the same goes for yet a third branch, which is .Net, and possibly a fourth, which is AppCode. But I don't have any contact with those ecosystems, so don't really know.
When did that happen?  For a long time you couldn't, say, install the "CLion module" in IntellJ - it simply didn't exist in their plugin repos.
That and you can use the different apps to sandbox the plugins so you aren't loading unused ones for each project!
Not with CLion.
Being native has nothing to do with performance. XCode is native, and it is easily one of the slowest, dog shit IDEs you can think of.
Wisdom from the wise. And you're correct. Still, it's possible.
Reminds me of Terraform plugin that broke after 0.11 they „fixed it”, yet I still get notifications about new ppl commenting how its again broken in newer version.You had one job JetBrains -> speed up developers. I dont need half of the features available. Terminal does a better job at most of them and will never change.But for the stuff I need and is used by millions if not tens of millions of developers.. just keep it working.I feel like its slowly the time to move to VSCode. An army of JS Devs will keep on updating it.
> Also VSCode is faster which still boggles my mind as to how that's possible.They do a lot of smart engineering around the editor:https://code.visualstudio.com/blogs/2018/03/23/text-buffer-r...
They don't support JNI development on purpose as means to sell Clion licenses, they are the only Java IDE not doing it.
> does 90% of what IntelliJ does, and arguably 40% of it betterWhat if those remaining 10% are essential to your productivity ?Like, will it autocomplete in my Django projects the way Pycharm does with models, up to their relations ? If so I may give it a try.
Pycharm has always been great at Django. But it’s autocomplete, even for project specific stuff is now superseded by copilot.
Well... thanks but no !
Parts of the debugger I miss.
JetBrains also published a separate post addressing the concerns about the new UIhttps://blog.jetbrains.com/idea/2022/06/addressing-the-new-u...
I'm not even being cynical --- this to me reads like: Sure, we willeventuallyshove it down your throat whether you like it or not, so there's no need to worry for the time being!
Yes you are being cynical - what they write is:>The current UI will remain available for at least two years, and we’re not going to remove it until we’ve seen that the vast majority of our users have successfully made the switch to the new UI.this sounds like you have toactively switchto the new UI if you already have an older version installed, and that they will be monitoring how many users have made the switch. Only after the "vast majority" (>80% ?) have switched will they "shove it down the throat" of the other 20%. Well, let's see how this promise will hold up...
What they have written is they are going to force a change. It's very clear. As soon as we have moved most people over, we will force you to move. You don't even have to read between the lines, it's explicit."We won't force it for two years". We are gonna force it in two years."We won't until the vast minority" we will as soon as most people have moved.
Software developers as developers: "Why does that random guy still pay for v1??? It's 20 years old, using Java 5 and old crap, let's force them to upgrade!!!!"Software developers as users: "Don't force me to upgrade"The hypocrisy is tangible and close to mind boggling.
As Devs: “I don’t want to maintain the old version. Don’t force work on me.”As Users: “I don’t want to upgrade to the new version. Don’t force work on me.”It’s not hypocritical to want your cake and eat it too. It’s only hypocritical if you think it’s wrong for companies to force people to upgrade and then doing that.  Not liking when your parents forced you to eat vegetables and making your kids eat vegetables isn’t hypocrisy.
I don't have an accurate name for that, but it's not right, either.
Exactly. See how Firefox shoved the borderless tabs down everyone's throat. The same playbook really.
> will remain availableSounds to me that it will not be the default. And their is a time-honoured trick in our industry of hiding an option deep in the menus, to drive down adoption, to preclude removal of a feature.Not to mention how many bug reports with be followed up with "Try in the new UI" as their only reply. We've seen this with Firefox, LibreOffice, KDE, Gnome, and so many other once-useful software.
and at that point they stop getting my money(customer since 2010)
> The current UI will remain available for at least two years, and we’re not going to remove it until we’ve seen that the vast majority of our users have successfully made the switch to the new UI. Also, very few of the design decisions you see now in the new UI are final, and we’re open to revisiting them based on your feedback.I smell the Reddit moment of "well, we see that you hate it so we won't remove the old one, we will just subtly break it in more and more ways till we brownbeat you to move. After all we can't say we wasted money on redesign to our bossess" moment.
to be honest, not sure why they have to explain themselves. started using JetBrains products when Eclipse became a monstrosity. this is not the first time the UI has changed. and it has always been gradual, with options to customize.they don't have to explain themselves here.
True, but people will also not have to explain themselves when they eventually switch to VS Code because VS Code is free, has the same UI, and get more feature rich by the week.
IntelliJ is incredibly feature rich. Eclipse fell behind, because its corporate backers like IBM, I assume, didn't fund it as massively anymore. Who's sponsoring VSCode for Java development in a way that competes with the weight that JetBrains is throwing around in that space? I don't use VSCode, so this is part honest question (and part presumption).
Of course not. IntelliJ is on another level when it comes features, if you really think people use IntelliJ for their UI, you’re deeply mistaken.
Jetbrains has a lot more IDEs than just IntelliJ.
I mean IntelliJ platform, not IntelliJ Idea.
> people will also not have to explain themselves when they eventually switch to VS CodePeople need not justify the tools they choose to anyone, so correct, should that happen, people will not have to explain themselves.
I've been happily paying for my own WebStorm license for 7 years—using it at home and at work. In the middle of that, I tried VS Code for a whole year at a new job, to really see how it compared (my new team was using it).It wasn't better in any way. In fact, most days I just missed WebStorm, but I soldiered on to see if I could find anything that was truly an improvement. At the end of my self-imposed, one-year trial, I concluded that VS Code had just one "advantage": it was free. Its barrier to entry was zero, from a pricing perspective. But since I had really given VS Code a fair shake, I gladly went back to WebStorm at work.Fast forward to this year, when I ran head on into a serious WebStorm performance problem: type checking a very large TypeScript code base. The WebStorm logs show that the TypeScript language server is crashing, and I filed a bug with JetBrains many months ago, but zero progress. VS Code, on the other hand, has no problem type checking this huge code base—it happens near instantly. For months I have now had WebStorm open for editing, and VS Code open for type checking, which is ridiculous, and I'd be embarrassed if my team knew I was doing this.It pains me greatly to say it, but perhaps the time has come to cancel my WebStorm license and just switch to VS Code.I mean, why not, if JetBrains is just set on copying VS Code anyway? I'll take better performance with a worse UI, and it seems like that's precisely what VS Code can give me at this point. How sad.
Software companies have trained me to not update my software. By now, when an update for an application or OS is available, I assume the new version is worse, and am usually right. Either I'm going to lose some functionality that I relied on, the UX is going to get shuffled around on me, or it's just going to get bigger and slower on my old machine.Instead of doing automatic updates, I delay updating until the company forces me to choose between updating and not using the software--and only then do I make the hard choice. I wish that every software would provide security updates on a separate track from the usual "UX rewrite" and "Feature cram" downgrades. That way, I can stay on the oldest version (the one that works the best), yet get critical security updates so I can use it safely.Web software, too! Reddit is the obvious example, but everywhere they're changing for the sake of change and usually making it worse. For example, Vanguard (the brokerage) recently did a site-wide update. They basically removed lots of critical functionality (including the only thing I actually visit their web site to do regularly) and replaced it with whitespace and fluff. For a while, they let you remain on the old site. Then they made it more difficult to find the link to the old site. Finally I got an E-mail saying that they'd charge my account a fee unless I "migrated" my account to the new site. Talk about end-user hostility. Now I just call them on the phone to do my rollovers, likely costing them more money. Good job, morons.
This absolutely cracks me up. Developers reacting like every user who has the perfectly functional UI/UX pulled out from under them. Shoe on the other foot as it were. Perhaps there's a lesson here for developers of software, their management, and/or companies who take part in this UI/UX churn for churns sake.The problem here is that statistics, and feedback, doesn't inform about the negative. All the users out there who are happily using your software in its current state and are perfectly happy with it but can't be assed to take the time to fill out your survey. As the saying goes "you can't improve what you don't measure." This should have continued something like "so be sure to consider what you can't measure". You can't force everyone to take your survey.Sure in part that puts the blame on the users who don't bother to fill out the survey. But that shouldn't also give the right to ignore them and what they might want. Perhaps a non-vote should be counted as a vote for no change instead of simply being ignored. It's pretty well known that the squeaky wheel gets the grease but that shouldn't mean the entire UI should be slathered in the grease the squeaky wheel wants but no one else asked for.
Yes, vim + a couple of plugins. It has it’s downsides, but one thing it does well is being familiar, and never breaking a contract. Even the plugins themselves can be pinned to a certain version.
Well, you can pin the IntelliJ IDEs to a version too, and thanks to the "perpetual fallback" license, you can use that version forever (once you have paid for an annual subscription once).
As much as I love Vim, it simply isn't an IDE.
How is the vim + python experience, especially with the debugger?
Admittedly I do update my plugins, but I've had ridiculous levels of breakage with CoC
What Java LSP do you use for Vim?
I imagine doing enterprise level java work with vim is a nightmare.
> and many of our new users tell us that the UI appears heavyweight and dated.Since IntellIJ is available for many languages / platforms (Java, Android, Python, PHP, Rust, etc.) I'm seriously interested from which user group this is coming. Because in this context "dated" seems to mean: "does not look like VSCode". Since most Java devs I know don't even use VSCode I doubt it's coming from that user group.
Literally the last thing I want in my IDE isanythingto be animated.
Have you turned off cursor blinking yet?
Not OP but that's the first thing I try to turn off in any editor/IDE/terminal.
It might be less the animation itself and more the extra latency.
In VIM the cursor never blinked.
Of course.
> A user interface is like an API for your eyeballs.Great analogy.
Not really because most often when working with APIs you figure out what you need then you disproportionately more time using it - UI is used for triggering short running operations - if the cost of finding it is high it's often higher than (not) using the tool. And often it's used to interact with rarely used or unknown features - UI clutter just leads to a mess - not discoverability.
I agree completely.  This is a great analogy.  It makes the intended point very succinctly.
Except in IDE you work with your brain, not eyes.
You write software without looking at the screen? I doubt it.GUIs have no other purpose than providing ways to interact with the software and communicating those controls via our eyes. Buttons are spread across the window because that turns out to be very efficient at both showing users what common features are available, and giving them a way to quickly use those features without having to dig through menus.
As others, I would much prefer they would just shovel this money into fixing bugs. I have simple bugs opened FOR YEARS and they only fix them if there's some backlash, like many people commenting and showing discontent.
To give a different perspective; these changes actually make me consider giving it another go.
Am I the only one who has a mostly clear IDE? Stock Jetbrains IDEs are way too cluttered.You can replace the entire menu bar and a few other things with learning the shortcut to search Actions and the omni search shortcut for code & more. So long as those are retained in the new UI, I don't see the issue here.Tangent: This to me is the same as the obsession with multiple monitors. You don't need it. Virtual desktops/workspaces do the same job in less physical space and let you actually organise your software.
Tangent: I am traveling at the moment and I miss my second monitor a lot.It's like saying you don't need toilets when you can dig a hole in the ground and use leaves to wipe instead of toilet paper.
You've not optimised your workflow for your environment, but instead it's the fault of the tools given to you for being too primitive? Come on.
Virtual Desktops are not a substitute to multiple monitors. With multiple monitors you can have several full screen windows open at the same time. Like coding in your main screen and seeing documentation/web browser in the other.
I have optimised my workflow, I am still productive, but the second monitor still brings me joys that nothing else can.
I think this is exactly the case for "if it works, don't touch it" IntelliJ has few shortcomings with window and tabs management, maybe better address those? I wouldn't mind subtle font improvements or some color schemes, that may reduce eye fatigue. But changing how things typically look if gonna hurt for me. Unfortunately, I don't think there other IDE that come close to Jetbrains, esp for java/scala dev.
If you use keyboard shortcuts foreverything, as I do, the rest of the UI outside of the editor really doesn't matter a whole lot. I won't be searching for buttons based on color memory or anything like that.
While I agree with this point, I also like my interfaces small. Because, since I don't click around on them, I don't like them taking up space.I also use a mouse on my PC, so I'm fairly precise in case I want to use the icons. There's no need to blow them up, so my fat fingers wouldn't misclick on a tablet.I like to code with two windows side by side, usually IDE + browser for docs, sometimes on a small screen. I'd rather have the extra pixels for the docs instead of random useless space around the IDE's widgets.
I like them small too which is why I hide basically everything except for the editor itself :)
I just wish the panels would default hide. I run bazel sync and half my window is build logs until I get around to closing them. If it’s not in active use, maybe after 5s, get it out of the way of code.
I hear you, but...when in the editor, ⇧ ⌘ F12 hides all windows except the active editor. I also added ⌘⇧H as a shortcut.
Yes but JetBrains IDEs are packed with literally thousands of useful features. I use them since at least a decade and I discover new features at least every month. And for this, a discoverable GUI is really important.
Sorry, it’s all my fault. I’ve resisted using their software for years, despite the praise, but I recently decided I would become a customer and switch to their software. Unfortunately this means they are now obligated by whatever has gone wrong with the world of software the past few years to ruin anything that was good about it.
100% agree.Now I’m scared …. Is JetBrains changing the Pycharm UI? Why? For fashion?Please no, this is the tool I use every day all day.JetBrains if you’re listening… don’t fuck up the UI. I do not want a redesign. I do not want your IDE to be like VSCode. It’s a GOOD thing that JetBrains does not look and feel like VSCode.I hope you are listening to your users.I pay money for Pycharm … don’t change it.
This is like the definition of "old man yells at cloud".
Frankly I think this is a non issue for any serious professional.A proficient user will have learned the keyboard commands for actions and navigation and rarely if ever use the visual elements. This holds for any tool.Those who have yet to take this step, but are unhappy that the UI update is coming, should take this opportunity to step up their professionalism and master the tools of their trade. It will be well worth the investment.Negative space is perhaps the one thing I might worry about, since not all devices come with giant or high resolution screens.Otherwise I welcome the update, and understand that Jetbrains need to continue attracting new users, who are used to different UI then those of us who are older.
I like rounded buttons. I prefer a bit of empty space over having a cluttered UI filled with buttons I'll never use. I like animations.The problems with such UI overhauls is usually that the changes overshoot the target by a mile and the designers seem to focus more on visual design than usability. Animations are almost always too long, because their purpose - for example signalling that it has registered the input - is forgotten.At this point at least web apps should just offer options to completely configure the UI layout with a JSON or HTML file and CSS.
I dunno, people have their preferences. I've used and loved IntelliJ for a decade but the VSCode UI is miles ahead.I'm really excited about the new Jetbrains IDE and am looking forward to it maturing.
Many have pointed out that the author is jumping to conclusions, which seems to be true from the (lack of) content in the article. So much of it is obviously wrong or lazily (not) researched. Some excerpts:>Haven't seen them but it will be [...]. The whole interface is going to [...]. Mark my wordsOh really? Sounds like you've spent time using it and forming and informed & balanced evidence-driven opinion alright.>Rounding of corners. Religion at this point. Homogenization. JetBrains wants to be like VSCodeAuthor has never used VSCode - not a rounded corner in sight.But... I have seen a few commenters here on HN that seem more informed than the author and do prefer the old UI. If you're in that category, great. But I wonder are you in a niche minority. I'm a VSCode user but need to use IntelliJ & PyCharm in work as I support some custom IDE plugins & integrations. I hate the UI. I've tried switching to it wholesale on multiple occasions (company covers licences so no cost difference to me) but got quickly frustrated with the experience - especially that the discoverable (mouseclick) UI is always so many more clicks compared to workflows in other apps & that needs to be down for new users during the keyboard/command learning curve.That's a subjective opinion on my part as a VSCode user, but I get the impression that it's shared by alotof long-time (& probably now former-) JetBrains users. If they're bleeding users to VSCode, it stands to reason that the userbase that state behind are going to be the subset that prefer the old UI. So pushback is understandable.
This is why it is important to not depend on a single commercial IDE to do all your work. Datagrip has been my go to for sql but would be willing to switch back to dbeaver if I had to. I also use Pycharm when a client has me working with Terraform alongside python repos. However the ide sugar for Terraform isn’t that beneficial and I often feel it would be better if I just went back to vim with a few tweaks for .tf files
I've been looking for a reason to leave the comfort of JetBrains tools for VSCode, and this might be it.I don't have a particularly strong opinion about the new UI, other than that it looks way too much like VSCode and way too little like the current one.The main reason I use JetBrains stuff is that I'm familiar with the interface, it's messy but I know where to find all I need. VSCode is unusable without writing json config files and dropping into a terminal.I always wonder why the keyboard jockeys are using IDEs at all instead of Vim. Why even use the Vim plugin instead of Vim? If optimal keyboard usage is your goal, Vim is all you need and want, it is the king.Me? I like being able to open the IDE preferences and see the configurations for all the testing, virtual environment, or whatever crap I need to have set up to do my work. Typing text is easy, dealing with bullshit configs is the annoying part.They've come into my messy table and threw all the papers into the ground. If I need to sort them all again I might as well not pay them for the privilege.
> I've been looking for a reasonIf you’re looking for a reason, you’d have found one regardless of anything else.
Ridiculous notion. I'm paying for their software for a reason. If they're winning against free it's because their offering is worthwhile.Of course I'd rather use the free alternative that nearly every language provides official support for. It's the job of JetBrains, who are selling a competition paid product, to make it worthwhile for me to keep paying.As the value of their product decreases, and the quality of the free offering increases, at some point a small increase in productivity is not worth the added cost. It has to be sufficiently better.
It's a little surprising that these UI choices are not a matter of user choice. Although when you think of the complexity of making a truly skinnable UI, or a component framework (I'm thinking Swing and the pluggable look and feel, or PLAF) Swing that IntelliJ used to be nominally written in. In that universe you could have made your own PLAF and rendered IntelliJ in that PLAF without asking permission.It turns out, though, there is a lot of value in homogenizing your application skin. Users can recognize each other's applications, and help each other out. Whole categories of problems are avoided, like poorly written custom components that aren't PLAF compatible. I don't have the answer, but I find it interesting to consider the forces pushing for and against putting greater UI control in user hands.
> It turns out, though, there is a lot of value in homogenizing your application skin.This is pretty well documented in the UX world, it’s called Jacob’s Law[1] and it states that your users spend most of their time using other products, and they generally prefer yours to work like others they’ve already trained themselves to use.I get that change always comes with resistance, but I will never understand the knee jerk reaction of “they’re morons and they have no idea what they’re doing” that is so common with change.[1]:https://lawsofux.com/jakobs-law/
> I get that change always comes with resistance, but I will never understand the knee jerk reaction of “they’re morons and they have no idea what they’re doing” that is so common with change.What's there to understand? In most cases they are morons that don't know what they're doing (and are not doing the change to improve users' lives, but to drive internal promotions for product people).
Seems a bit dumb to change ui to match vscode. Why would anyone pay $$$ per year when vscode is free then?
This has to be the most cringe post I've read on HN in my life, and that's saying something.
"Change is bad, unless it's great."- Friend who was a UX researcher on Windows in the Windows 7 days
Interesting timing given that they are half way done getting their own extensions to Jetpack Compose out. They have compose desktop and compose web now. Unfortunately, they seem to not have a compose IOS (which would make it a nice alternative to Flutter). And compose desktop still has a runtime dependency on the jvm even though the underlying graphics library is based on Skia, which is also used by Chrome. Given that Jetbrains has native compilers for Kotlin, this is a bit odd and maybe something they are looking to address over time.So, this makes me wonder about the timing for this and the technical architecture. Are they eating their own dogfood here? Or is this a separate thing?
I'm surprised at how strong the views are about this. I interact with jetbrains primarily through "Shift+Shift" and start typing the action I want. The UI is unnecessarily cluttered, once you get used to using the command palette.
I'm so surprised at the vitriolic response people are having to the change. I spent many of my formative years writing in Eclipse and was an early adopter of WebStorm. I'm no stranger to the IntelliJ style interface. But it has always been a huge impediment for me. It feels clunky, loud, disorganized. Like a desktop with random papers spread out everywhere. And like someone who has one of these desks, I'm sure the people who are upset know exactly where the stapler that they buried 3 months ago is but for me it's just a mess. This new change looks fantastic and might make me not feel so slow working with IntelliJ products.
Looking at the screenshot, I noticed that JetBrains has started using an underline to denote selected tab. Could someone explain the reason for this, instead of say, drawing the shape of the tab in the background?
I am using the new UI and its actually a great upgrade imo. I don't think it took more than an hour to become as familiar and productive as before and its actually much cleaner with more space for code.
I use IntelliJ to write mostly Perl. Since trying the 2020 and 2021 series of IntelliJ, I sat down for an hour and tried every major release since I started using it, and I settled on the one I like the most. I'm quite happy with it, and I'm not planning to upgrade again. Thank you, JetBrains, for supporting your older versions.To OP, I recommend downloading the version you like and sticking with it. You'll be good for years. Use this time to occasionally research alternatives.
Aaaand for some reason, creating a new project from a directory no longer does that. If I select the directory and click Next, it instead creates a directory called Untitled in that directory and opens a project there. Since all my projects, ever, are created in existing directories, and since I do that pretty often, I’ve uninstalled the latest one (after two uses) and gone back to the old one. I’ve used IntelliJ since 2009. Jetbrains, what the fuck are you doing?
Are you on an EAP build?
Nope. I'm on 2021.3.1 and went to 2022.x. I have toolbox and a full subscription so I just rolled back.
The most useful thing that kept me using JetBrains was the key-mapping homogeneity between JetBrains, MacOS, and Chrome (e.g. the same key-mappings are used to go back, forward in history, through tabs, to close a tab, ...)Now I'm finding the key mappings (ex: Multi-line select) and functionalities (setting up your workspace a module) are drifting across the JetBrains products.Attention is needed with these UIs to prevent drift and preserve homogeneity across applications.
My JB Elephant-in-the-room is the awful performance. I'm complaining instead of having switched, since I haven't found anything and powerful for multi-file projects in Rust, and Python. I find myself, more and more, opening files in Sublime and managing the files manually when PyCharm+Rust Plugin is behaving especially badly. Restarting PyCharm often helps, short-term.
For Rust, any LSP-supporting editor with rust-analyzer should be giving a great experience. Not sure what you mean by "multi-file" projects, but RA handles a normal crate with multiple modules perfectly fine.
Solution: make UI 100% theme-able. Icons, buttons, paddings, borders, fonts, backgrounds, everything as a customizable theme.The community will do the rest.
Well:https://blog.jetbrains.com/idea/2022/06/addressing-the-new-u...> The new UI will remain customizable. It is, and will be, possible to change many aspects of the look and feel, such as icons, colors, font sizes, and spacing between controls through theme plugins. We’ll add options as needed to accommodate user preferences, like the ability to customize the toolbar.
We’ll see what “many aspects” means
I frequently wish more programs would implement a UI as flexible as the one in Firefox, where you can just drag buttons around, add extra large dedicated buttons for zoom, remove buttons you don't need etc.Even more flexibility would be cool as well in more specialized software, but I think FF does enough while not overwhelming the user with possibilities.
I’m a bit between tables. On the one hand, I prefer the look of the new UI. It looks nice, yet I can clearly find things.But on the other hand, it puts a bunch of things I regularly use into nested submenus for seemingly no reason (the top bar where they used to be is now mostly empty).Caveat: I only used it for a short time, as neither Webstorm nor Rider work properly with the current EAP + new UI.
I see your points and understand the frustration.  The minor changes over the years haven't bothered me too much.  What really messed with me was when the commit pop-up (with diffs) was changed to a tab, nestled in the same space as my files.  Nooooooooo!  I want the pop-up.  I want to know that thisisdifferent from what I was doing before.
You can change it back. Go to Preferences -> Version Control -> Commit -> Use non-modal commit interface.
Obligatory xkcd reference to "UI Change":https://xkcd.com/1770/JetBrains is obviously becoming more like VS Code here so that they aren't edged out of the market. "Copy your competitors". Complaining as if we are paying customers is understandable because UI changes are annoying. However we have to see things from JetBrain's perspective. They're trying to stay alive in a market where their market share is rapidly decreasing being taken by VS Code.
Why is VSCode eating their lunch? IntelliJ’s refactoring is miles ahead. As well as support for the jvm languages.  Intellisafe and jump to declaration are also better imho.The only thing that I can think of is that vscode is free and “good enough”. The integration for JavaScript and golang seems to be more “natural” in VSCode, somehow.If you are using the free IntelliJ  tools you get a crappy js editor when using the rust or Java specific IDE.  Now I need to install another IntelliJ app.Also I like being able to run vscode with a dev container. It allows new team members to instantly start working on a project and grt most things done.
I wonder if people are actuallyleavingJetbrains' products for VS Code, or whether VS Code simply has more new people starting to use it. People who, probably, wouldn't have used IntelliJ anyway (just like many, many people used to use Eclipse – and, likely, many still do).Looking around me, I see many people who have to work on crappy corporate PCs where management figures VS Code is good enough, and it's free, so why pay for IntelliJ? And since the devs themselves don't seem to complain, they'll just use VS Code.
> Why is VSCode eating their lunch?- People don't know better. That is, they literally have no idea what a proper IDE is and what it does. Hence all the "VS Code is as good as IDEA" comments- It's free. People feel entitled to have even the most complex software apps for free.
WebStorm already has quite the hard stand against VS Code. VS Code gets all the plugins for popular frameworks by their respective authors and isfree.Rider is also stuck between a free VS Community version and VS Code which some people successfully use with the C# plugin (although I wouldn't use the latter for large code bases).
> Why is VSCode eating their lunch?Remote development extension that makes development from remote machines, VMs, docker containers seem like it's your local machine.I switched from CLion to VSCode for this, even though CLion is generally a nicer IDE for C++.  VSCode is also better for memory usage.
But do you really think they're losing marketshare due to the UI?VScode being free and comparable feature wise surely is the main challenge.It doesn't help that VScode is catching up and in many cases surpassing their engine for some languages. Looking at their poor typescript performance and longstanding python type hinting bugs. I've also heard VScode has much better docker dev container support.I get the it's not necessarily the same resources working the UI and these things but still. If the UI drastically change to be more like VSCode it's just one more reason for me as an existing customer to change.
> Complaining as if we are paying customers is understandableI am a paying customer because the UI is so much better than vs code. For my daily work vs code actually covers all functionality that I use, but the UI is shit so I use JetBrains. They will loose the customers that are already using it, betting that they will get more new one - a bad bed imo.
> They're trying to stay alive in a market where their market share is rapidly decreasing being taken by VS Code.That doesn't make any sense. If they start looking like VS Code I would switch to the (free) VS Code as there is no point in paying for (almost) the same experience.
> as if we are paying customers is understandableBut I am a paying customer! I've been subscribed to the 'all you can eat' option for several years now.And as a paying customer, I'm not thrilled about the UI change but I'll get used to it.
Kind of a strange move indeed, considering their announcement of Fleet, which aims to do exactly that
I honestly prefer the new UI. To hell with the old one.Why cant someone who prefers no change just use the old one and do no updates.
This is like HN candy. Complain about “modern UI trends” even if it isn’t true. Even if you explicitly admit it isn’t true because you speculate it might someday be true. Bash the nearest Electron app that isn’t even involved in the thing being hypothesized about. Modern UI Trends front page post here we go!
I think I can get used to both the new UI and the old one, as personal preference doesn't really matter that much.That being said, I really agree with the text that the design to be chosen should be  based on A/B testing and whether the design improvement leads to an improvement in productivity.
Is there a side-by-side comparison?
This reminds me of the discussions we're having over at LibreOffice, with some people wanting to switch the default interface to MS-Office style tabs. Except there, we're trying to get people to switch _from_ closed-source commercial software.
Clion still hasnt got its Makefile auto-regen working yet.  Sometime makes a project unuseable until Makefile is deleted and recreated from Makefile.amWhy are JetBrain engineers re-working on what was a pretty good UI and not actually working on broken internal things?
> What now? vim + billion plugins?Just vim :-)
https://search.maven.org/is doing the same thing. The new interface is much prettier, full of padding and space, and so much more unusable.
if you want to try it out, found an article on enabling the new UI:https://agdl.dev/posts/new-ui-jetbrains-ide
I honestly prefer the new UI.
I use Jetbrains IDEs every day and from the screenshot I can barely spot a difference. Everyone will be okay.This trend of crying at every pixel change is honestly laughable.Also you can install themes on Jetbrains' IDEs.
> I use Jetbrains IDEs every day and from the screenshot I can barely spot a difference. Everyone will be okay.Except for the terminal window, it looks like an entirely different IDE.
Mess with the UI all you want, just give the users the ability to use the one they are used to, or opt-in to the updates.  Bonus for supporting customizable profiles and presets
Monochrome icons are ignoring millions of years of honing the human vision system. I find it the perfect example of utter failure of UI and UX design.
This looks so bad. Luckily I relay mostly on shortcut keys. I hope animations, if they indeed add them (wtf?), could be turned off.
One reason for increasing space and element size is due to increase of myopia and other vision related problems in recent decades.
Unpopular opinion: so the majority has to suffer for the minority? Just give us the option to have both and the users can decide for themselves whether they need a special UI or not.
While I like new UI, this argument is just bogus. IntelliJ interface scales nicely without redesign.
IntelliJ is an accessibility disaster on Mac OS. If JetBrains can fix that, I may actually use their products.
I use dozens of keyboard shortcuts in PyCharm. Most editing takes place without reaching for the mouse (vim plugin). GUI is still an integral part of Jetbrains IDEs regardless of how good you're with shortcuts. There are 10,000 things in there, with at most you can memorize and assign 100 shortcuts.
Nah, real programmers use butterflies to deflect cosmic rays to flip bits on hard drive platters.
I've worked with dozens of jetbrains IDE users and nobody ever did that. Sure, we use a lot of keyboard bindings, but...
"The whole interface is going to feel like turbulent molasses"
I switched on the new UI yesterday and really enjoy it, personally.
Wow, that looks pretty muchexactlylike VS code!
If rider gets this new UI, then jetbrains is dead to me
What made product originally great? Features, not UI.
Products become great by being "mission-oriented": they help their users achieve a goal. Often the UI evolves organically based on user feedback and becomes "locally-optimized" for the user's workflow.When you get a PM/Designer who insists on following the design principles they learned on YouTube, they tend to throw out the UI along with all the implicit knowledge accumulated within it. This is related to Chesterton's Fencehttps://fs.blog/chestertons-fence/
Unless in the cases where the UI was actually part of the featureset.
it looks like vscode, yall gonna love it haha
I find the entire "java world" as I like to think of it, littered with slow IDEs.The "Electron bloat world" editors have been much more snappy in my experience.Typically the "java world" editors will lag out to the point where tapping on the "File" menu will take 3-5 seconds on occasion. Also they seem to rely on "indexing" and while the "indexing" operating is taking place, the entire editor just slows to a complete crawl.I've seen this in Android Studio, IntelliJ, Tizen Studio, Eclipse - pretty much anything that's "java world". Apologies for the imprecise nomenclature, but this has been my experience and after so many years it has reached a stage of just low expectations from me whenever I see anything related to these IDEs.
I also had this feeling for Java IDEs, but my idea changed when I tried IntelliJ IDEs 10 years ago. I still feel IntelliJ IDEs fast and, many times, more powerful than VSCode. But I also see the gap getting thinner. Maybe that's why they created Fleet. If they match the dominant UX and add features only they can offer, they might stay in the throne.
I don't find this to be true. Have used eclipse for four years, IntelliJ for three. IntelliJ is never slow and it's very easy to remove and add modules, this way you can keep the workspace clean. Also eclipse took ages to open, two instances at best could be running together. I run four IntelliJ and it works very well.
I have a similar experience.Sublime is the only non-ancient editor I've used that is actually snappy, I can't perceiveanylag. It feels like native software used to feel, yet looks half decent.Vscode is slower, with both input and general UI lag. It helps to turn off hardware acceleration, but only a little. Luckily, you get used to it. Unless you go back to Sublime/Vim/Nano for a while, you stop noticing it.Then there's the "you should be using"-ones...* Visual Studio. Syntax highlighting takes a second or two when opening "large" files, input latency is bad, sometimes it takes longer to save a file than it does to compile your project, which now runs without your changes.* XCode. Syntax highlighting works on Tuesdays, input latency is horrible. Randomly need to restart when certain features just stop working.* Android Studio. Input and UI latency, needed 5 out of my then 8 gigabytes of RAM to load an empty project, had to close most other programs when working on a medium sized app, including my browser (Slack, Email, Teams etc).* Goland. I've tried using this on both Windows and Linux, but I've never gotten anything to compile consistently. Indexing takes minutes, CPU usage randomly spikes, memory consumption constantly climbs... it just seems to eat resources doing nothing.Sublime is the only (non-Vim/Emacs) editor I've used that takes my time, room/lap temperature and ergonomics seriously.
If you want to alt-click on any function and instantly get taken to its definition, even in a library, some indexes need to be built. At least I assume. Last time I tried VS Code it wasn’t anywhere near IntelliJ’s capabilities.
> tapping on the "File" menu will take 3-5 seconds on occasion.Are you still using a hard disk drive? I think I was last time I saw a delay that took that long on IntelliJ IDEA.
I have a nvme SSD and a SATA SSD, with a R95950X Processor and 32GB of RAM, with lots of it free. To this date I can reproduce this in Android Studio, which is based on IntelliJ IDEA from what I understand.
I absolutely love the new UI. The only thing I want to change is reduce the font sizes by 1 or 2 sizes then it would be perfect for me.
You can change the UI font size in: Preferences -> Appearance & Behavior -> Appearance -> Use Custom Font | Size
That doesn't actually work tho, it doesn't scale the UI. It just reduces the font-size :(
You don't even need to learn all the shortcuts - I cleared my PHPStorm UI long ago. If I need something in a menu, I open the Actions search menu and start typing. If I need to look into code, double tap shift for the All search menu and go ham.Sprinkle in one or two for e.g. git branches and you get most of the speed you need.I don't need to look at a splatter of information on my screen - I need code and a select few other pieces.
